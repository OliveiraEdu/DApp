from Crypto.Hash import keccak
import os
import binascii
from iroha import IrohaCrypto
from iroha import Iroha, IrohaGrpc
from iroha.ed25519 import H
import integration_helpers

from iroha.primitive_pb2 import can_set_my_account_detail
import sys
import csv

if sys.version_info[0] < 3:
    raise Exception("Python 3 or a more recent version is required.")

IROHA_HOST_ADDR = os.getenv("IROHA_HOST_ADDR", "127.0.0.1")
IROHA_PORT = os.getenv("IROHA_PORT", "50051")
ADMIN_ACCOUNT_ID = os.getenv("ADMIN_ACCOUNT_ID", "admin@test")
ADMIN_PRIVATE_KEY = os.getenv(
    "ADMIN_PRIVATE_KEY",
    "f101537e319568c765b2cc89698325604991dca57b9716b58016b253506cab70",
)

user_private_key = IrohaCrypto.private_key()
user_public_key = IrohaCrypto.derive_public_key(user_private_key)
iroha = Iroha(ADMIN_ACCOUNT_ID)
net = IrohaGrpc("{}:{}".format(IROHA_HOST_ADDR, IROHA_PORT))

# Read account attributes from a csv
def read_accounts_from_csv(file_path):
    accounts = []
    with open(file_path, mode='r') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            accounts.append({
                'account_id': row['Account ID']
            })
    return accounts

# Path to the CSV file
csv_file_path = 'accounts.csv'

# Read accounts from CSV
accounts = read_accounts_from_csv(csv_file_path)

# Use the [n] account from the CSV for the example
account = accounts[5]

@integration_helpers.trace
def create_contract():
    bytecode = "608060405234801561001057600080fd5b5073a6abc17819738299b3b2c1ce46d55c74f04e290c6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109b8806100746000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636b29deeb1461003b578063d4e804ab14610057575b600080fd5b610055600480360381019061005091906104c1565b610075565b005b61005f6102e9565b60405161006c9190610634565b60405180910390f35b60005b81518110156102e457600083838381518110610097576100966108a1565b5b6020026020010151600001518484815181106100b6576100b56108a1565b5b6020026020010151602001516040516024016100d49392919061064f565b6040516020818303038152906040527fb7d66df7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166175308360405161019e9190610606565b60006040518083038160008787f1925050503d80600081146101dc576040519150601f19603f3d011682016040523d82523d6000602084013e6101e1565b606091505b5050905080610225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021c9061069b565b60405180910390fd5b838381518110610238576102376108a1565b5b602002602001015160200151604051610251919061061d565b604051809103902084848151811061026c5761026b6108a1565b5b602002602001015160000151604051610285919061061d565b60405180910390208660405161029b919061061d565b60405180910390207f5e1b38cd47cf21b75d5051af29fa321eedd94877db5ac62067a076770eddc9d060405160405180910390a4505080806102dc90610829565b915050610078565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061032061031b846106e0565b6106bb565b905080838252602082019050828560208602820111156103435761034261090e565b5b60005b8581101561039157813567ffffffffffffffff811115610369576103686108ff565b5b8086016103768982610439565b85526020850194506020840193505050600181019050610346565b5050509392505050565b60006103ae6103a98461070c565b6106bb565b9050828152602081018484840111156103ca576103c9610913565b5b6103d58482856107b6565b509392505050565b600082601f8301126103f2576103f16108ff565b5b813561040284826020860161030d565b91505092915050565b600082601f8301126104205761041f6108ff565b5b813561043084826020860161039b565b91505092915050565b60006040828403121561044f5761044e610904565b5b61045960406106bb565b9050600082013567ffffffffffffffff81111561047957610478610909565b5b6104858482850161040b565b600083015250602082013567ffffffffffffffff8111156104a9576104a8610909565b5b6104b58482850161040b565b60208301525092915050565b600080604083850312156104d8576104d761091d565b5b600083013567ffffffffffffffff8111156104f6576104f5610918565b5b6105028582860161040b565b925050602083013567ffffffffffffffff81111561052357610522610918565b5b61052f858286016103dd565b9150509250929050565b6105428161077a565b82525050565b60006105538261073d565b61055d8185610753565b935061056d8185602086016107c5565b80840191505092915050565b600061058482610748565b61058e818561075e565b935061059e8185602086016107c5565b6105a781610922565b840191505092915050565b60006105bd82610748565b6105c7818561076f565b93506105d78185602086016107c5565b80840191505092915050565b60006105f060278361075e565b91506105fb82610933565b604082019050919050565b60006106128284610548565b915081905092915050565b600061062982846105b2565b915081905092915050565b60006020820190506106496000830184610539565b92915050565b600060608201905081810360008301526106698186610579565b9050818103602083015261067d8185610579565b905081810360408301526106918184610579565b9050949350505050565b600060208201905081810360008301526106b4816105e3565b9050919050565b60006106c56106d6565b90506106d182826107f8565b919050565b6000604051905090565b600067ffffffffffffffff8211156106fb576106fa6108d0565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610727576107266108d0565b5b61073082610922565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006107858261078c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156107e35780820151818401526020810190506107c8565b838111156107f2576000848401525b50505050565b61080182610922565b810181811067ffffffffffffffff821117156108205761081f6108d0565b5b80604052505050565b6000610834826107ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086757610866610872565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4572726f722063616c6c696e67207365727669636520636f6e7472616374206660008201527f756e6374696f6e0000000000000000000000000000000000000000000000000060208201525056fea26469706673582212203683813472f0824c7b4b5c39640c927a40ddd81b5c1a892b4b88d1e685b7d12d64736f6c63430008060033"
    """Bytecode was generated using remix editor  https://remix.ethereum.org/ from file detailv2.sol. """
    tx = iroha.transaction(
        [iroha.command("CallEngine", caller=ADMIN_ACCOUNT_ID, input=bytecode)]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    net.send_tx(tx)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx))
    for status in net.tx_status_stream(tx):
        print(status)
    return hex_hash

@integration_helpers.trace
def set_account_details(address, account, keys, values):
    assert len(keys) == len(values), "Keys and values arrays must be of the same length"
    
    params = integration_helpers.get_first_four_bytes_of_keccak(
        b"setAccountDetails(string,string[],string[])"
    )
    
    params += integration_helpers.argument_encoding(account['account_id'])  # source account id
    params += integration_helpers.argument_encoding(keys)  # keys
    params += integration_helpers.argument_encoding(values)  # values
    
    tx = iroha.transaction(
        [
            iroha.command(
                "CallEngine", caller=ADMIN_ACCOUNT_ID, callee=address, input=params
            )
        ]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    response = net.send_tx(tx)
    print(response)
    for status in net.tx_status_stream(tx):
        print(status)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx))
    return hex_hash

# Generate 10 key-value pairs
keys = [f"CID{i}" for i in range(1, 11)]
values = [f"QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW{i}" for i in range(1, 11)]

hash = create_contract()
address = integration_helpers.get_engine_receipts_address(hash)
integration_helpers.get_engine_receipts_result(hash)
hash = set_account_details(address, account, keys, values)
print(account)

query = iroha.query('GetAccountDetail', account_id=account['account_id'])
IrohaCrypto.sign_query(query, ADMIN_PRIVATE_KEY)
response = net.send_query(query)
data = response.account_detail_response
print(f'Account id = {account}, details = {data.detail}')
print("done")
