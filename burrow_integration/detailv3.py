from Crypto.Hash import keccak
import os
import binascii
import csv
from iroha import IrohaCrypto
from iroha import Iroha, IrohaGrpc
from iroha.ed25519 import H
import integration_helpers
from iroha.primitive_pb2 import can_set_my_account_detail
import sys

if sys.version_info[0] < 3:
    raise Exception("Python 3 or a more recent version is required.")

IROHA_HOST_ADDR = os.getenv("IROHA_HOST_ADDR", "127.0.0.1")
IROHA_PORT = os.getenv("IROHA_PORT", "50051")
ADMIN_ACCOUNT_ID = os.getenv("ADMIN_ACCOUNT_ID", "admin@test")
ADMIN_PRIVATE_KEY = os.getenv(
    "ADMIN_PRIVATE_KEY",
    "f101537e319568c765b2cc89698325604991dca57b9716b58016b253506cab70",
)

user_private_key = IrohaCrypto.private_key()
user_public_key = IrohaCrypto.derive_public_key(user_private_key)
iroha = Iroha(ADMIN_ACCOUNT_ID)
net = IrohaGrpc("{}:{}".format(IROHA_HOST_ADDR, IROHA_PORT))

def read_accounts_from_csv(file_path):
    accounts = []
    with open(file_path, mode='r') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            accounts.append({
                'account_id': row['Account ID'],
                'private_key': row['Private Key'],
                'public_key': row['Public Key']
            })
    return accounts


@integration_helpers.trace
def create_contract():
    bytecode = ""
    # Replace with actual bytecode

    tx = iroha.transaction(
        [iroha.command("CallEngine", caller=ADMIN_ACCOUNT_ID, input=bytecode)]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    net.send_tx(tx)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx)).decode()
    for status in net.tx_status_stream(tx):
        print(status)
    return hex_hash

@integration_helpers.trace
def set_account_details(address, account):
    keys = ["CID1", "CID2", "CID3", "CID4", "CID5", "CID6", "CID7", "CID8", "CID9", "CID10"]
    values = [
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW1",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW2",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW3",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW4",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW5",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW6",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW7",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW8",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW9",
        "QmW2HkQ1A4Hmq1H2NdC3g9kuTjVpbxTAcNev4VbyRcKbuW10"
    ]

    params = integration_helpers.get_first_four_bytes_of_keccak(
        b"setAccountDetails(string,string[],string[])"
    )
    no_of_param = 3
    for x in range(no_of_param):
        params = params + integration_helpers.left_padded_address_of_param(
            x, no_of_param
        )
    params = params + integration_helpers.argument_encoding(account['account_id'])  # source account id
    params = params + integration_helpers.argument_encoding(keys)  # keys
    params = params + integration_helpers.argument_encoding(values)  # values
    tx = iroha.transaction(
        [
            iroha.command(
                "CallEngine", caller=ADMIN_ACCOUNT_ID, callee=address, input=params
            )
        ]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    response = net.send_tx(tx)
    print(response)
    for status in net.tx_status_stream(tx):
        print(status)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx)).decode()
    return hex_hash

@integration_helpers.trace
def set_account_quorum(address):
    params = integration_helpers.get_first_four_bytes_of_keccak(
        b"setAccountQuorum(string,string)"
    )
    no_of_param = 2
    for x in range(no_of_param):
        params = params + integration_helpers.left_padded_address_of_param(
            x, no_of_param
        )
    params = params + integration_helpers.argument_encoding(
        ADMIN_ACCOUNT_ID
    )  # source account id
    params = params + integration_helpers.argument_encoding("2")  # new quorum
    tx = iroha.transaction(
        [
            iroha.command(
                "CallEngine", caller=ADMIN_ACCOUNT_ID, callee=address, input=params
            )
        ]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    response = net.send_tx(tx)
    print(response)
    for status in net.tx_status_stream(tx):
        print(status)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx)).decode()
    return hex_hash

@integration_helpers.trace
def get_account_details(address):
    params = integration_helpers.get_first_four_bytes_of_keccak(b"getAccountDetail()")
    no_of_param = 0
    tx = iroha.transaction(
        [
            iroha.command(
                "CallEngine", caller=ADMIN_ACCOUNT_ID, callee=address, input=params
            )
        ]
    )
    IrohaCrypto.sign_transaction(tx, ADMIN_PRIVATE_KEY)
    response = net.send_tx(tx)
    for status in net.tx_status_stream(tx):
        print(status)
    hex_hash = binascii.hexlify(IrohaCrypto.hash(tx)).decode()
    return hex_hash

# Path to the CSV file
csv_file_path = 'accounts.csv'

# Read accounts from CSV
accounts = read_accounts_from_csv(csv_file_path)

# Use the first account for the example
account = accounts[0]

hash = create_contract()
print(f"Contract creation hash: {hash}")
address = integration_helpers.get_engine_receipts_address(hash)
if not address:
    print("Failed to get contract address. Exiting.")
    sys.exit(1)

hash = get_account_details(address)
integration_helpers.get_engine_receipts_result(hash)
hash = set_account_details(address, account)
hash = get_account_details(address)
integration_helpers.get_engine_receipts_result(hash)
print("done")


#Query - GetAccountDetail
user = account
query = iroha.query('GetAccountDetail',account_id=user)
IrohaCrypto.sign_query(query, ADMIN_PRIVATE_KEY)
response = net.send_query(query)
data = response.account_detail_response
print(f'Account id = {user}, details = {data.detail}')
